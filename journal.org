# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2022-07-07 21:15:56 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D
* Clock
  #+BEGIN: clocktable :scope file :maxlevel 200 :emphasize t
  #+CAPTION: Clock summary at [2022-07-07 Do 21:15]
  | Headline         | Time    |         |      |      |
  |------------------+---------+---------+------+------|
  | *Total time*     | *16:20* |         |      |      |
  |------------------+---------+---------+------+------|
  | *Theseus*        | *16:20* |         |      |      |
  | \_  /Components/ |         | /16:20/ |      |      |
  | \_    Data types |         |         | 1:04 |      |
  | \_    Database   |         |         | 2:38 |      |
  | \_    Backend    |         |         | 9:48 |      |
  | \_      HTTP API |         |         |      | 4:12 |
  | \_    Frontend   |         |         | 2:50 |      |
  #+END:
* Theseus
** Components
*** Data types                                                    :internals:
    :LOGBOOK:
    CLOCK: [2022-07-01 Fr 17:48]--[2022-07-01 Fr 17:51] =>  0:03
    CLOCK: [2022-06-30 Do 22:10]--[2022-06-30 Do 23:11] =>  1:01
    :END:
*** Database
    :LOGBOOK:
    CLOCK: [2022-07-01 Fr 17:51]--[2022-07-01 Fr 20:08] =>  2:17
    CLOCK: [2022-06-30 Do 23:11]--[2022-06-30 Do 23:32] =>  0:21
    :END:
    Pretty sure I'll use sqlite.
*** GUI
    I /could/ use Gtk, or I could be adventurous and use fyne. I tried it
    before, and it did not work out well, but on the plus side, it is native
    Go, the cgo overhead would go away.

    But after taking a brief look at my fyne experiment, I'll stick with Gtk.
*** Networking?                                          :feature:meditation:
    I could make an attempt to build this as a distributed application so I
    can sync reminders between machines. I think that's a nice idea.
*** Backend
    :LOGBOOK:
    CLOCK: [2022-07-04 Mo 17:12]--[2022-07-04 Mo 19:37] =>  2:25
    CLOCK: [2022-07-02 Sa 17:04]--[2022-07-02 Sa 19:06] =>  2:02
    CLOCK: [2022-07-01 Fr 20:56]--[2022-07-01 Fr 22:05] =>  1:09
    :END:
**** IMPLEMENT HTTP API
     :LOGBOOK:
     CLOCK: [2022-07-06 Mi 18:27]--[2022-07-06 Mi 20:39] =>  2:12
     CLOCK: [2022-07-05 Di 19:38]--[2022-07-05 Di 21:38] =>  2:00
     :END:
     I decided to use HTTP as my application layer protocol, because it is
     simple and available, and it also leaves open the option to build a web
     based interface later on if I feel like it.
     But for the moment, the "client" is going to be the frontend, so I need
     to think about what operations I need.
     - Add Reminder
     - Delete Reminder
     - Edit Reminder
     - Get all Reminders
     - Get pending Reminders
     - Get new Reminders
*** Frontend                                                             :ui:
    :LOGBOOK:
    CLOCK: [2022-07-07 Do 18:25]--[2022-07-07 Do 21:15] =>  2:50
    :END:

** Bugs
** Questions
