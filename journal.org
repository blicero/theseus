# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2022-09-12 18:55:15 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TAGS: backend(k)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D
* Clock
  #+BEGIN: clocktable :scope file :maxlevel 200 :emphasize t
  #+CAPTION: Clock summary at [2022-09-12 Mo 18:55]
  | Headline                                     | Time       |            |          |          |      |
  |----------------------------------------------+------------+------------+----------+----------+------|
  | *Total time*                                 | *7d 19:07* |            |          |          |      |
  |----------------------------------------------+------------+------------+----------+----------+------|
  | *Theseus [6/11]*                             | *7d 19:07* |            |          |          |      |
  | \_  /Components [10/16]/                     |            | /7d 14:11/ |          |          |      |
  | \_    Recurring Reminders [0/3]              |            |            |    14:37 |          |      |
  | \_      Display Recurrences                  |            |            |          |     1:29 |      |
  | \_      Edit Recurrences                     |            |            |          |     2:06 |      |
  | \_      Handle Recurrences                   |            |            |          |     3:07 |      |
  | \_    Data types                             |            |            |     1:04 |          |      |
  | \_    Database                               |            |            |     2:38 |          |      |
  | \_    Networking [3/3]                       |            |            |  1d 7:10 |          |      |
  | \_      mDNS [1/1]                           |            |            |          |    14:08 |      |
  | \_        Cache invalidation                 |            |            |          |          | 3:49 |
  | \_      Synchronization [0/0]                |            |            |          |    17:02 |      |
  | \_    Backend [3/4]                          |            |            |    23:54 |          |      |
  | \_      Testing                              |            |            |          |     0:35 |      |
  | \_      Notifications                        |            |            |          |    12:12 |      |
  | \_      HTTP API                             |            |            |          |     5:30 |      |
  | \_    Frontend [4/6]                         |            |            | 2d 10:19 |          |      |
  | \_      Server on-demand                     |            |            |          |     1:39 |      |
  | \_      Icon                                 |            |            |          |     0:36 |      |
  | \_      Filtering and Sorting                |            |            |          |     7:43 |      |
  | \_      Re-Arm a Reminder                    |            |            |          |     3:59 |      |
  | \_    Other sources [0/2]                    |            |            |  2d 2:29 |          |      |
  | \_      Framework?                           |            |            |          |     3:11 |      |
  | \_      logreader                            |            |            |          | 1d 23:18 |      |
  | \_  /Cleanup/                                |            | /1:28/     |          |          |      |
  | \_  /Testing [0/0]/                          |            | /1:30/     |          |          |      |
  | \_    Database                               |            |            |     1:30 |          |      |
  | \_  /Bugs/                                   |            | /1:58/     |          |          |      |
  | \_    Update timestamp when re-activating... |            |            |     1:16 |          |      |
  | \_    Deleting Reminders                     |            |            |     0:42 |          |      |
  #+END:
* Theseus [6/11]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
** Components [10/16]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** MEDITATE Recurring Reminders [0/3]           :internals:feature:database:
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2022-09-09 Fr 18:24]--[2022-09-09 Fr 22:20] =>  3:56
    CLOCK: [2022-09-07 Mi 18:17]--[2022-09-07 Mi 20:18] =>  2:01
    CLOCK: [2022-09-06 Di 21:17]--[2022-09-06 Di 21:56] =>  0:39
    CLOCK: [2022-09-06 Di 19:31]--[2022-09-06 Di 20:50] =>  1:19
    :END:
    I would like to allow for Reminders that occur repeatedly, regularly.
    I don't think I've ever done this before, so I will need to think about
    how I want to do that first. Maybe I should not try be overly
    sophisticated, my smartphones alarm clock app, for example allows me set
    an alarm to go off only once, daily, or on specific days of the week.
    That's not outrageously powerful, but it should suffice for most recurring
    tasks.
    So, a Reminder can go off
    - just once
    - daily, possibly with a limit?
    - on specific weekdays, maybe also with a kind of cutoff date or
      something.
    /Oooor/, I could radically change how I model when the Reminder goes
    off. Currently, I use the naive approach of just specifiying one point in
    time. But I /could/ also specify a predicate, such as "3rd Monday of the
    month". Or "Monday, 14:30". That would be less easy to deal with,
    though. I shouldn't let increased computational complexity scare me off,
    but it's also harder to model something that mentally in a way that can be
    readily translated into Go and SQL.
    *NB* I did include two fields in the recurrence table to specifiy a
    Reminder should be repeated a fixed number of times, but for the time
    being, we are going to ignore them entirely. I just wanted them there so I
    don't have to change the database schema later on if I ever get around to
    it.
**** TODO Display Recurrences                                            :ui:
     :LOGBOOK:
     CLOCK: [2022-09-10 Sa 15:05]--[2022-09-10 Sa 16:34] =>  1:29
     :END:
**** TODO Edit Recurrences                                               :ui:
     :LOGBOOK:
     CLOCK: [2022-09-10 Sa 17:34]--[2022-09-10 Sa 19:40] =>  2:06
     :END:
     This is going to be a bit complicated.
**** TODO Handle Recurrences                                        :backend:
     :LOGBOOK:
     CLOCK: [2022-09-12 Mo 16:22]--[2022-09-12 Mo 18:54] =>  2:32
     CLOCK: [2022-09-10 Sa 21:17]--[2022-09-10 Sa 21:52] =>  0:35
     :END:
     My brain just isn't working that well tonight ([2022-09-10 Sa]).
*** Data types                                                    :internals:
    :LOGBOOK:
    CLOCK: [2022-07-01 Fr 17:48]--[2022-07-01 Fr 17:51] =>  0:03
    CLOCK: [2022-06-30 Do 22:10]--[2022-06-30 Do 23:11] =>  1:01
    :END:
*** Database                                                       :database:
    :LOGBOOK:
    CLOCK: [2022-07-01 Fr 17:51]--[2022-07-01 Fr 20:08] =>  2:17
    CLOCK: [2022-06-30 Do 23:11]--[2022-06-30 Do 23:32] =>  0:21
    :END:
    Pretty sure I'll use sqlite.
*** GUI                                                                  :ui:
    I /could/ use Gtk, or I could be adventurous and use fyne. I tried it
    before, and it did not work out well, but on the plus side, it is native
    Go, the cgo overhead would go away.

    But after taking a brief look at my fyne experiment, I'll stick with Gtk.
*** Networking [3/3]                                     :feature:meditation:
    I could make an attempt to build this as a distributed application so I
    can sync reminders between machines. I think that's a nice idea.
    A-and while we're at it, I would like using zeroconf/mDNS to have
    instances find each other.
**** DONE mDNS [1/1]
     CLOSED: [2022-08-30 Di 19:52]
     :LOGBOOK:
     CLOCK: [2022-08-27 Sa 18:26]--[2022-08-27 Sa 21:49] =>  3:23
     CLOCK: [2022-08-26 Fr 19:31]--[2022-08-26 Fr 20:03] =>  0:32
     CLOCK: [2022-08-25 Do 21:18]--[2022-08-26 Fr 00:32] =>  3:14
     CLOCK: [2022-08-24 Mi 23:22]--[2022-08-25 Do 00:04] =>  0:42
     CLOCK: [2022-08-24 Mi 19:54]--[2022-08-24 Mi 22:22] =>  2:28
     :END:
     - [X] Publish
     - [X] Discover
***** Final notes (hopefully)
      This was more tedious than I had anticipated, but now I found a solution
      that is a bit ugly but seems to work reasonably well: For incoming
      ServiceEntries from peers, I adjust the TTL to a small value (like, 5
      seconds). I run a goroutine that periodically removes epired peers from
      the cache. And I restart the service browser periodically. This way,
      peers that go offline are removed from the cache quickly, and peers that
      go online are detected quickly.
      I could build something myself, but if there are standardized protocols
      to do this, including 3rd party libraries to implement / interact with
      those protocols, I prefer to go that way.
***** DONE Cache invalidation                                     :internals:
      CLOSED: [2022-08-30 Di 19:52]
      :LOGBOOK:
      CLOCK: [2022-08-30 Di 19:00]--[2022-08-30 Di 19:52] =>  0:52
      CLOCK: [2022-08-29 Mo 22:23]--[2022-08-29 Mo 23:00] =>  0:37
      CLOCK: [2022-08-29 Mo 18:51]--[2022-08-29 Mo 21:11] =>  2:20
      :END:
      This is going to be a little hairy, but I would prefer a more elegant
      solution than periodically discarding the entire cache and start a new
      Browser, especially since my first naive attempt at that did not work
      very well.
***** [2022-08-27 Sa 18:26]
      I need to deal with disappearing peers gracefully. 
      Alas, with DNS-SD, the default TTL of the SRV records is nearly an hour,
      so that is not useful for caching. :-| 
***** [2022-08-26 Fr 00:32]
      It was a bit tricky, but I think I made some real progress tonight.
***** [2022-08-24 Mi 19:36]
      Well, looks like without Internet access I can forget about this. There
      is a Go package to talk DNS-SD, but I'd need to download the module. I
      could try and talk to avahi directly via dbus, but without an API
      reference, I don't think I'd get very far.
      [2022-08-24 Mi 19:53] - Nevermind, I just used my phone to access the
      Interwebs and download the zeroconf package, hoping it is not a dead
      end. -- PS: It was a small download, less than 1MiB including
      dependencies, and it works reasonably well.
**** DONE Synchronization [0/0]
     CLOSED: [2022-09-03 Sa 21:10]
     :LOGBOOK:
     CLOCK: [2022-09-03 Sa 19:37]--[2022-09-03 Sa 21:10] =>  1:33
     CLOCK: [2022-09-02 Fr 16:33]--[2022-09-02 Fr 20:37] =>  4:04
     CLOCK: [2022-09-01 Do 18:31]--[2022-09-01 Do 21:28] =>  2:57
     CLOCK: [2022-08-31 Mi 19:29]--[2022-08-31 Mi 23:02] =>  3:33
     CLOCK: [2022-08-30 Di 22:21]--[2022-08-30 Di 23:12] =>  0:51
     CLOCK: [2022-08-30 Di 19:57]--[2022-08-30 Di 21:48] =>  1:51
     CLOCK: [2022-08-27 Sa 17:04]--[2022-08-27 Sa 17:05] =>  0:01
     CLOCK: [2022-08-26 Fr 21:15]--[2022-08-26 Fr 22:40] =>  1:25
     CLOCK: [2022-08-26 Fr 20:17]--[2022-08-26 Fr 21:04] =>  0:47
     :END:
***** [2022-08-30 Di 19:57]
      Now that I've got the peer discovery more or less sorted out (I hope,
      naively), I can finally turn to the problem of how to synchronize my
      data across several nodes.
      This is actually pretty hairy.
*** Backend [3/4]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2022-07-09 Sa 17:39]--[2022-07-09 Sa 17:40] =>  0:01
    CLOCK: [2022-07-04 Mo 17:12]--[2022-07-04 Mo 19:37] =>  2:25
    CLOCK: [2022-07-02 Sa 17:04]--[2022-07-02 Sa 19:06] =>  2:02
    CLOCK: [2022-07-01 Fr 20:56]--[2022-07-01 Fr 22:05] =>  1:09
    :END:
**** DONE Testing
     CLOSED: [2022-07-23 Sa 19:31]
     :LOGBOOK:
     CLOCK: [2022-07-23 Sa 19:22]--[2022-07-23 Sa 19:31] =>  0:09
     CLOCK: [2022-07-23 Sa 18:55]--[2022-07-23 Sa 19:21] =>  0:26
     :END:
     The notification displayed by the test "suite" does not expire.
     That was useful initially, but it got annoying surprisingly fast.
     ...
     Looking at the code, I have two options:
     - I can add a timeout parameter to the backend.notify method. It's called
       in only one place from the regular code, so I can add a parameter there.
     - I can add a timeout value to the Reminder struct *and* to the database.
     Sounds like an easy choice. Or is it?
**** DONE Notifications                                             :feature:
     CLOSED: [2022-07-23 Sa 19:33]
     :LOGBOOK:
     CLOCK: [2022-07-12 Di 20:42]--[2022-07-12 Di 23:22] =>  2:40
     CLOCK: [2022-07-11 Mo 20:46]--[2022-07-12 Di 01:03] =>  4:17
     CLOCK: [2022-07-09 Sa 17:40]--[2022-07-09 Sa 22:55] =>  5:15
     :END:
***** TODO Audio                                                    :feature:
      Can I get the program to play an audio sound when a Reminder is due?
      Obviously, I would like to keep this a configurable as
      possible. Ideally, I would like to choose per Reminder whether to use an
      audio signal at all, and if so, which one, maybe even allowing for
      supplying an audio file of my own (ideally, the format should not
      matter). I looked into that briefly for my failed audio book reader, and
      it did not go very far. So it's going to get interesting. But I have
      nothing better to do, do I?
      ...
      After looking into it, a little, it looks to me like audio is very
      complex and probably more trouble than it's worth. The APIs I looked at,
      at least, portaudio and gstreamer aka gst, are very complex, anyway.
      I remember when I rewrote my countdown timer in C++ and Qt4, there was a
      very simple function or method to say /I have this audio file here,
      please play it/, but none of the libraries I have seen so far offer
      anything like this.
      I *could* just delegate the task to an external command like mpv or
      mpg123?
**** DONE HTTP API
     CLOSED: [2022-08-23 Di 19:04]
     :LOGBOOK:
     CLOCK: [2022-07-22 Fr 16:32]--[2022-07-22 Fr 17:50] =>  1:18
     CLOCK: [2022-07-06 Mi 18:27]--[2022-07-06 Mi 20:39] =>  2:12
     CLOCK: [2022-07-05 Di 19:38]--[2022-07-05 Di 21:38] =>  2:00
     :END:
     I decided to use HTTP as my application layer protocol, because it is
     simple and available, and it also leaves open the option to build a web
     based interface later on if I feel like it.
     But for the moment, the "client" is going to be the frontend, so I need
     to think about what operations I need.
     - [X] Add Reminder
     - [X] Delete Reminder
     - [X] Edit Reminder
     - [X] Get all Reminders
     - [X] Get pending Reminders
*** Frontend [4/6]                                                       :ui:
    :LOGBOOK:
    CLOCK: [2022-08-23 Di 19:05]--[2022-08-23 Di 20:18] =>  1:13
    CLOCK: [2022-07-20 Mi 19:40]--[2022-07-20 Mi 21:57] =>  2:17
    CLOCK: [2022-07-20 Mi 18:45]--[2022-07-20 Mi 19:20] =>  0:35
    CLOCK: [2022-07-19 Di 20:50]--[2022-07-20 Mi 14:25] => 17:35
    CLOCK: [2022-07-18 Mo 21:20]--[2022-07-19 Di 00:23] =>  3:03
    CLOCK: [2022-07-16 Sa 19:01]--[2022-07-16 Sa 20:25] =>  1:24
    CLOCK: [2022-07-15 Fr 20:05]--[2022-07-15 Fr 22:05] =>  2:00
    CLOCK: [2022-07-15 Fr 15:10]--[2022-07-15 Fr 17:44] =>  2:34
    CLOCK: [2022-07-14 Do 19:13]--[2022-07-14 Do 22:44] =>  3:31
    CLOCK: [2022-07-13 Mi 18:51]--[2022-07-13 Mi 21:30] =>  2:39
    CLOCK: [2022-07-09 Sa 17:05]--[2022-07-09 Sa 17:26] =>  0:21
    CLOCK: [2022-07-08 Fr 22:19]--[2022-07-08 Fr 23:26] =>  1:07
    CLOCK: [2022-07-08 Fr 18:42]--[2022-07-08 Fr 21:43] =>  3:01
    CLOCK: [2022-07-07 Do 22:38]--[2022-07-07 Do 22:50] =>  0:12
    CLOCK: [2022-07-07 Do 18:25]--[2022-07-07 Do 21:15] =>  2:50
    :END:
**** DONE Server on-demand
     CLOSED: [2022-09-05 Mo 21:41]
     :LOGBOOK:
     CLOCK: [2022-09-05 Mo 20:02]--[2022-09-05 Mo 21:41] =>  1:39
     :END:
     Or should it be Server-as-a-Service? If the frontend is started and the
     backend is not running, the frontend should just start a backend process
     and move on.
**** DONE Icon
     CLOSED: [2022-09-05 Mo 19:52]
     :LOGBOOK:
     CLOCK: [2022-09-05 Mo 19:16]--[2022-09-05 Mo 19:52] =>  0:36
     :END:
     Before I move any further, I really need an icon.
**** SUSPENDED Systray?
     CLOSED: [2022-09-05 Mo 18:28]
     I would /really/ like to have a systray icon.
     A cursory glance to gotk's documentation is not very encouraging,
     though. So for the time being, it's a hard no. Maybe later.
**** TODO Filtering and Sorting
     :LOGBOOK:
     CLOCK: [2022-08-23 Di 20:18]--[2022-08-23 Di 21:38] =>  1:20
     CLOCK: [2022-08-20 Sa 18:48]--[2022-08-20 Sa 22:10] =>  3:22
     CLOCK: [2022-08-20 Sa 15:45]--[2022-08-20 Sa 18:46] =>  3:01
     :END:
     I would like to filter and sort the Reminders in the TreeView, and Gtk
     supports that explicitly, but it makes matters a little more complicated,
     and I have no Internet access currently ([2022-08-20 Sa]), so I will have
     to experiment a little.
     ...
     After some toying around, I find the ListStore can - theoretically - do
     its own sorting, but it only sorta-kinda works, as I want to sort by more
     than one column, which seems to be too much for ListStore's or TreeView's
     little brain, even though I supply the logic. 
**** TODO Keyboard shortcuts
     I want to do more stuff with the keyboard.
     I am a very keyboard-centric person, so no surprise there, I guess.
     I have not done a whole lot of stuff with keyboard-events in ... pretty
     much any UI toolkit. But I suppose it is possible, ain't it?
     Unfortunately, to learn more about this, I would need access to the
     Internet, which I currently ([2022-07-20 Mi 23:11]) do not have, so this
     time I am not really procrastinating.
**** DONE Re-Arm a Reminder                                         :feature:
     CLOSED: [2022-07-22 Fr 14:12]
     :LOGBOOK:
     CLOCK: [2022-07-21 Do 17:11]--[2022-07-21 Do 20:17] =>  3:06
     CLOCK: [2022-07-20 Mi 23:12]--[2022-07-21 Do 00:05] =>  0:53
     :END:
     I want a way to conveniently re-arm a reminder
*** Other sources [0/2]                                             :feature:
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    The whole point of using a client-server approach was to allow external
    programs to supply Reminders, the way I used to do with my old -
    *ancient* - Perl POE Reminder application.
    Currently ([2022-07-25 Mo]), I am without usable Internet access, so I'll
    have to be a little creative to come up with ideas.
    I used to have one backend to watch directories for changes, mainly to be
    notified of finished Downloads. Without Internet access, that doesn't make
    a lot of sense.
    I've always wanted to monitor system logs for important messages. Now,
    *that* would be useful, wouldn't it?
    Nota Bene, by the way, that a client running as a separate process,
    possibly even on another machine, communicates with the backend using
    HTTP, so it need not be written in Go, necessarily. Perl might be more
    helpful, for example.
**** TEST Framework?                                   :internals:meditation:
     :LOGBOOK:
     CLOCK: [2022-08-15 Mo 19:18]--[2022-08-15 Mo 21:19] =>  2:01
     CLOCK: [2022-08-15 Mo 13:27]--[2022-08-15 Mo 14:18] =>  0:51
     CLOCK: [2022-08-14 So 14:26]--[2022-08-14 So 14:45] =>  0:19
     :END:
     As I am staring in horror at an empty source file, I wonder if I should
     start by building a kind of framework for clients/sources. If I come up
     with several ideas for message sources, it would make sense to factor out
     as much of that as possible.
**** TODO logreader
     :LOGBOOK:
     CLOCK: [2022-08-18 Do 19:41]--[2022-08-18 Do 21:48] =>  2:07
     CLOCK: [2022-08-17 Mi 18:16]--[2022-08-17 Mi 19:35] =>  1:19
     CLOCK: [2022-08-16 Di 19:14]--[2022-08-16 Di 21:02] =>  1:48
     CLOCK: [2022-08-13 Sa 18:41]--[2022-08-13 Sa 20:44] =>  2:03
     CLOCK: [2022-07-27 Mi 03:31]--[2022-07-28 Do 19:19] => 39:48
     CLOCK: [2022-07-25 Mo 20:22]--[2022-07-25 Mo 20:35] =>  0:13
     :END:
     So lets read some log files, shall we?
     This should keep me busy for a while, too, I think, ... right?
** DONE Cleanup                                          :internals:refactor:
   CLOSED: [2022-07-24 So 11:39]
   :LOGBOOK:
   CLOCK: [2022-07-23 Sa 21:57]--[2022-07-23 Sa 22:11] =>  0:14
   CLOCK: [2022-07-22 Fr 21:27]--[2022-07-22 Fr 21:30] =>  0:03
   CLOCK: [2022-07-22 Fr 21:11]--[2022-07-22 Fr 21:20] =>  0:09
   CLOCK: [2022-07-22 Fr 18:35]--[2022-07-22 Fr 19:23] =>  0:48
   CLOCK: [2022-07-22 Fr 18:21]--[2022-07-22 Fr 18:35] =>  0:14
   :END:
** Testing [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   Automated testing is good. So I would like to add more tests, and maybe,
   just /maybe/ play around with Go's builtin fuzzing.
*** Database
    :LOGBOOK:
    CLOCK: [2022-08-19 Fr 18:15]--[2022-08-19 Fr 19:45] =>  1:30
    :END:
** Bugs                                                                 :bug:
*** DONE Update timestamp when re-activating Reminders
    CLOSED: [2022-08-22 Mo 20:11]
    :LOGBOOK:
    CLOCK: [2022-08-22 Mo 18:55]--[2022-08-22 Mo 20:11] =>  1:16
    :END:
    When I reactivate a Reminder, I want its timestamp to be set to some point
    in the the not too distant future. Ideally, I could open a dialog to ask
    for a time.
*** DONE Deleting Reminders
    CLOSED: [2022-08-23 Di 18:47]
    :LOGBOOK:
    CLOCK: [2022-08-23 Di 18:28]--[2022-08-23 Di 18:47] =>  0:19
    CLOCK: [2022-08-22 Mo 20:12]--[2022-08-22 Mo 20:35] =>  0:23
    :END:
    When I try to delete a Reminder, a dialog appears and asks me if I am
    sure, but it only has one button that says /Yes/. ???
** Questions
